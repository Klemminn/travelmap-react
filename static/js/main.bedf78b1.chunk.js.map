{"version":3,"sources":["components/inputs/Input.tsx","components/layout/Col.tsx","components/layout/Row.tsx","components/modals/Modal.tsx","utils/PhotoUtils.tsx","components/modals/PlaceModal.tsx","components/Header.tsx","components/Link.tsx","environment/index.tsx","services/connector.tsx","services/PlaceService.tsx","states/PlaceState.tsx","states/HoverState.tsx","components/Map.tsx","components/Marker.tsx","components/PlaceSidebar.tsx","components/TypeSelector.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["oldValue","Input","className","onChange","timeout","rest","classes","push","join","event","value","target","setTimeout","Modal","header","footer","children","ModalHeader","ModalBody","ModalFooter","PhotoUtils","photo","size","replace","PlaceModal","place","isOpen","style","backgroundImage","getImage","files","image","name","googleMapsUrl","link","tripadvisorUrl","websiteUrl","address","description","Header","toggleTheme","Navbar","NavbarBrand","onClick","Link","href","rel","envParams","api","connector","axios","create","baseURL","EnvParams","headers","Accept","PlaceService","params","get","data","PlaceState","createStateLink","places","search","placeTypes","selected","getPlaces","a","currentState","set","console","log","setSelected","setPlaceTypes","HoverState","setHover","hover","MapFactory","ReactMapboxGl","accessToken","Map","useStateLink","MapStyle","containerStyle","height","width","fitBounds","map","key","id","Marker","iconClasses","code","coordinates","longitude","latitude","PlaceSidebar","placeholder","onMouseEnter","onMouseLeave","placeType","types","icon","FaHome","subtypes","placeTypeCodes","display","FaMonument","FaLandmark","FaWater","FaHiking","FaMapMarkedAlt","TypeSelector","type","typeClasses","every","subtype","typeCodes","flat","forEach","filter","indexOf","toggleType","t","length","stopPropagation","toggleSubtype","Home","toggle","App","useEffect","newClasses","htmlTag","document","getElementsByTagName","htmlClasses","split","c","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bedf78b1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Input as BootstrapInput } from 'reactstrap'\r\n\r\ntype InputProps = {\r\n  className?: string,\r\n  onChange?(arg0: any): void,\r\n  timeout?: number,\r\n  [rest:string]: any\r\n}\r\n\r\nlet oldValue: any\r\nconst Input = ({ className, onChange, timeout, ...rest }: InputProps) => {\r\n  const classes = ['input-component']\r\n  if (className) {\r\n    classes.push(className)\r\n  }\r\n  return (\r\n    <BootstrapInput\r\n      className={classes.join(' ')}\r\n      onChange={(event) => {\r\n        if (onChange) {\r\n          const { value } = event.target\r\n          if (timeout) {\r\n            oldValue = value\r\n            setTimeout(() => {\r\n              if (oldValue === value) {\r\n                onChange(value)\r\n              }\r\n            }, timeout)\r\n          } else {\r\n            onChange(value)\r\n          }\r\n        }\r\n      }}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import { Col } from 'reactstrap'\r\n\r\nexport default Col\r\n","import { Row } from 'reactstrap'\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport { Modal as BootstrapModal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\ntype ModalProps = {\r\n  children?: any,\r\n  header?: string,\r\n  footer?: any,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Modal = ({ header, footer, children, ...rest }: ModalProps) => (\r\n  <BootstrapModal {...rest}>\r\n    {header && (<ModalHeader>{header}</ModalHeader>)}\r\n    {children && (<ModalBody>{children}</ModalBody>)}\r\n    {footer && (<ModalFooter>{footer}</ModalFooter>)}\r\n  </BootstrapModal>\r\n)\r\n\r\nexport default Modal\r\n","class PhotoUtils {\r\n  static getImage (photo: string, size?: string) {\r\n    if (!size) {\r\n      return photo\r\n    }\r\n    return photo.replace('full', size)\r\n  }\r\n}\r\n\r\nexport default PhotoUtils\r\n","import React from 'react'\r\nimport { FaGoogle, FaTripadvisor, FaLink, FaHeart } from 'react-icons/fa'\r\n\r\nimport { PhotoUtils } from 'utils'\r\nimport { Link, Modal } from 'components'\r\nimport { Place } from 'types'\r\n\r\nimport './PlaceModal.scss'\r\n\r\ntype PlaceModalProps = {\r\n  place: Place | null,\r\n  [rest:string]: any\r\n}\r\n\r\nconst PlaceModal = ({ place, ...rest }: PlaceModalProps) => {\r\n  const isLiked = true\r\n  return (\r\n    <Modal\r\n      className='place-modal-component'\r\n      isOpen={!!place}\r\n      size='xl'\r\n      {...rest}\r\n    >\r\n      <div className='content-container'>\r\n        <div\r\n          className='header-container'\r\n          style={{ backgroundImage: `url(${PhotoUtils.getImage(place?.files[0].image || '', 'large')}`}}\r\n        >\r\n          <div className='name'>{place?.name}</div>\r\n          <div className='actions'>\r\n            <div\r\n              className='toggle-like'\r\n              // onClick={() => isLiked ? removeFromItinerary(place) : addToItinerary(place)}\r\n            >\r\n              <FaHeart className='toggle-icon' />\r\n              {isLiked ? 'Remove from Favorites' : 'Add to Favorites'}\r\n            </div>\r\n            <div className='links'>\r\n              {place?.googleMapsUrl && (\r\n                <Link link={place.googleMapsUrl}>\r\n                  <FaGoogle />\r\n                  <span className='name'>Google Maps</span>\r\n                </Link>\r\n              )}\r\n              {place?.tripadvisorUrl && (\r\n                <Link link={place.tripadvisorUrl}>\r\n                  <FaTripadvisor />\r\n                  <span className='name'>TripAdvisor</span>\r\n                </Link>\r\n              )}\r\n              {place?.websiteUrl && (\r\n                <Link link={place.websiteUrl}>\r\n                  <FaLink />\r\n                  <span className='name'>Website</span>\r\n                </Link>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='info-container'>\r\n          <div className='title'>Description</div>\r\n          {place?.address && (\r\n            <div className='address'>\r\n              {place.address}\r\n            </div>\r\n          )}\r\n          <div className='description'>\r\n            {place?.description}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PlaceModal\r\n","import React from 'react'\r\nimport { Navbar, NavbarBrand } from 'reactstrap'\r\nimport { FaCloudSun } from 'react-icons/fa'\r\n\r\nimport './Header.scss'\r\n\r\ntype HeaderProps = {\r\n  toggleTheme?(): void\r\n}\r\n\r\nconst Header = ({ toggleTheme }: HeaderProps) => (\r\n  <Navbar className='header-component'>\r\n    <NavbarBrand>\r\n      Look at Iceland!\r\n      {toggleTheme && (\r\n        <FaCloudSun onClick={toggleTheme} />\r\n      )}\r\n    </NavbarBrand>\r\n  </Navbar>\r\n)\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport './Link.scss'\r\n\r\ntype LinkProps = {\r\n  children: any,\r\n  link: string,\r\n  [rest:string]: any\r\n}\r\n\r\nconst Link = ({ children, link, ...rest }: LinkProps) => (\r\n  <a\r\n    href={link}\r\n    target='_blank'\r\n    rel='noopener noreferrer'\r\n    className='link-component'\r\n  >\r\n    {children}\r\n  </a>\r\n)\r\n\r\nexport default Link\r\n","type EnvParams = {\r\n  api: string\r\n}\r\n\r\nconst production: EnvParams = {\r\n  api: 'https://api.lookaticeland.com/v1'\r\n}\r\n\r\nconst local: EnvParams = {\r\n  api: 'http://127.0.0.1:8000/v1'\r\n}\r\n\r\nconst env = process.env.REACT_APP_ENV\r\n\r\nconst envParams: EnvParams = (\r\n  env === 'production'\r\n  ? production\r\n  : local\r\n)\r\n\r\nexport default envParams\r\n","import axios from 'axios'\r\n\r\nimport EnvParams from 'environment'\r\n\r\nconst connector = axios.create({\r\n  baseURL: `${EnvParams.api}`,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default connector\r\n","import connector from './connector'\r\n\r\nclass PlaceService {\r\n  static async getPlaces (params?: {\r\n    placeTypes?: string[],\r\n    search?: string\r\n  }) {\r\n    const { data } = await connector.get('/places/', { params })\r\n    return data\r\n  }\r\n}\r\n\r\nexport default PlaceService\r\n","import { createStateLink } from '@hookstate/core'\r\n\r\nimport { PlaceService } from 'services'\r\nimport { Place } from 'types'\r\n\r\ntype PlaceStateType = {\r\n  places: Place[],\r\n  search: string,\r\n  placeTypes: string[],\r\n  selected: Place | null\r\n}\r\n\r\nconst defaultState: PlaceStateType = {\r\n  places: [],\r\n  search: '',\r\n  placeTypes: [],\r\n  selected: null\r\n}\r\n\r\nexport const PlaceState = createStateLink(defaultState)\r\n\r\nexport const getPlaces = async () => {\r\n  try {\r\n    const currentState = PlaceState.get()\r\n    const { search, placeTypes } = currentState\r\n    const places = await PlaceService.getPlaces({ search, placeTypes })\r\n    PlaceState.set({ ...currentState, places })\r\n  } catch (e) {\r\n    console.log('Error getting places', e)\r\n  }\r\n}\r\n\r\nexport const setSearch = (search: string) => {\r\n  PlaceState.set({ ...PlaceState.get(), search })\r\n  getPlaces()\r\n}\r\n\r\nexport const setSelected = (selected: Place | null) => {\r\n  PlaceState.set({ ...PlaceState.get(), selected })\r\n}\r\n\r\nexport const setPlaceTypes = (placeTypes: string[]) => {\r\n  PlaceState.set({ ...PlaceState.get(), placeTypes })\r\n  getPlaces()\r\n}\r\n\r\ngetPlaces()\r\n","import { createStateLink } from '@hookstate/core'\r\n\r\nexport const HoverState = createStateLink('')\r\n\r\nexport const setHover = (hover: string) => {\r\n  HoverState.set(hover)\r\n}\r\n","import React from 'react'\r\nimport ReactMapboxGl from 'react-mapbox-gl'\r\nimport { useStateLink } from '@hookstate/core'\r\n\r\nimport { Marker } from 'components'\r\n\r\nimport { Place } from 'types'\r\nimport { PlaceState } from 'states'\r\n\r\nimport MapStyle from './MapStyle.json'\r\n\r\nconst MapFactory = ReactMapboxGl({\r\n  accessToken: 'pk.eyJ1Ijoia2xlbWVuemhyYWZuIiwiYSI6ImNrYzZreXRpODBzdm0yc28wc2xoc25pZnIifQ._5XM9iO5bmCXlnj0cPQ2Zg',\r\n})\r\n\r\ntype MapProps = {\r\n  [rest:string]: any\r\n}\r\n\r\nconst Map = ({ ...rest }: MapProps) => {\r\n  const { places } = useStateLink(PlaceState).get()\r\n\r\n  return (\r\n    <MapFactory\r\n      className='map-component'\r\n      style={MapStyle}\r\n      containerStyle={{\r\n        height: '100vh',\r\n        width: '100vw'\r\n      }}\r\n      fitBounds={[[-27, 62], [-11, 67.5]]}\r\n      {...rest}\r\n    >\r\n      {places.map((place: Place) => (\r\n        <Marker\r\n          key={place.id}\r\n          place={place}\r\n        />\r\n      ))}\r\n    </MapFactory>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { Marker as MapboxMarker } from 'react-mapbox-gl'\r\nimport { useStateLink } from '@hookstate/core'\r\n\r\nimport { Place } from 'types'\r\nimport { PhotoUtils } from 'utils'\r\nimport { HoverState, setSelected } from 'states'\r\n\r\nimport './Marker.scss'\r\n\r\ntype MarkerProps = {\r\n  place: Place,\r\n}\r\n\r\nconst Marker = ({ place }: MarkerProps) => {\r\n  const hover = useStateLink(HoverState).get()\r\n  const iconClasses = ['icon']\r\n  if (hover === place.code) {\r\n    iconClasses.push('hover')\r\n  }\r\n\r\n  return (\r\n    <MapboxMarker\r\n      key={place.id}\r\n      className='marker-component'\r\n      coordinates={[place.longitude, place.latitude]}\r\n      onClick={() => setSelected(place)}\r\n    >\r\n      <div\r\n        className={iconClasses.join(' ')}\r\n        style={{ backgroundImage: `url(${PhotoUtils.getImage(place.files[0].image, 'small')}` }}\r\n      >\r\n        <div className='name'>\r\n          {place.name}\r\n        </div>\r\n      </div>\r\n    </MapboxMarker>\r\n  )\r\n}\r\n\r\nexport default Marker\r\n","import React from 'react'\r\nimport { useStateLink } from '@hookstate/core'\r\n\r\nimport { PhotoUtils } from 'utils'\r\nimport { PlaceState, setHover, setSelected, setSearch } from 'states'\r\nimport { Input } from 'components'\r\n\r\nimport './PlaceSidebar.scss'\r\n\r\ntype PlaceSidebarProps = {\r\n  [rest:string]: any\r\n}\r\n\r\nconst PlaceSidebar = ({ ...rest }: PlaceSidebarProps) => {\r\n  const { places } = useStateLink(PlaceState).get()\r\n\r\n  return (\r\n    <div className='place-sidebar-component'>\r\n      <Input\r\n        className='search-input'\r\n        placeholder='Search by name'\r\n        onChange={(value) => setSearch(value)}\r\n        timeout={500}\r\n      />\r\n      {places.map((place) => (\r\n        <div\r\n          key={place.code}\r\n          className='place-tile'\r\n          onMouseEnter={() => setHover(place.code)}\r\n          onMouseLeave={() => setHover('')}\r\n          onClick={() => setSelected(place)}\r\n        >\r\n          <div className='info'>\r\n            <div className='name'>\r\n              {place.name}\r\n            </div>\r\n            <div className='type'>\r\n              {place.placeType}\r\n            </div>\r\n            <div className='address'>\r\n              {place.address}\r\n            </div>\r\n          </div>\r\n          <div className='image' style={{ backgroundImage: `url(${PhotoUtils.getImage(place.files[0].image, 'small')})` }} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlaceSidebar\r\n","import React from 'react'\r\nimport { useStateLink } from '@hookstate/core'\r\nimport { FaMonument, FaHome, FaLandmark, FaWater, FaHiking, FaMapMarkedAlt } from 'react-icons/fa'\r\n\r\nimport './TypeSelector.scss'\r\nimport { PlaceState, setPlaceTypes } from 'states'\r\n\r\ntype Subtype = {\r\n  name: string,\r\n  placeTypeCodes: string[],\r\n  display: boolean,\r\n  selected: boolean\r\n}\r\n\r\ntype Type = {\r\n  icon: any,\r\n  name: string,\r\n  subtypes: Subtype[]\r\n}\r\n\r\nconst types: Type[] = [\r\n  {\r\n    icon: FaHome,\r\n    name: 'Towns',\r\n    subtypes: [\r\n      {\r\n        name: 'Towns',\r\n        placeTypeCodes: ['town'],\r\n        display: false,\r\n        selected: false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    icon: FaMonument,\r\n    name: 'Landmarks',\r\n    subtypes: [\r\n      {\r\n        name: 'Canyons & Cliffs',\r\n        placeTypeCodes: ['canyon', 'cliff'],\r\n        display: true,\r\n        selected: false\r\n      },\r\n      {\r\n        name: 'Beaches',\r\n        placeTypeCodes: ['beach'],\r\n        display: true,\r\n        selected: false\r\n      },\r\n      {\r\n        name: 'Waterfalls',\r\n        placeTypeCodes: ['waterfall'],\r\n        display: true,\r\n        selected: false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    icon: FaLandmark,\r\n    name: 'Museums',\r\n    subtypes: [\r\n      {\r\n        name: 'Museums',\r\n        placeTypeCodes: ['museum'],\r\n        display: false,\r\n        selected: false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    icon: FaWater,\r\n    name: 'Pools',\r\n    subtypes: [\r\n      {\r\n        name: 'Public',\r\n        placeTypeCodes: ['public_pool'],\r\n        display: true,\r\n        selected: false\r\n      },\r\n      {\r\n        name: 'Natural',\r\n        placeTypeCodes: ['natural_pool'],\r\n        display: true,\r\n        selected: false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    icon: FaHiking,\r\n    name: 'Activities',\r\n    subtypes: [\r\n      {\r\n        name: 'Golf',\r\n        placeTypeCodes: ['golf'],\r\n        display: true,\r\n        selected: false\r\n      },\r\n      {\r\n        name: 'Tours',\r\n        placeTypeCodes: ['tour'],\r\n        display: true,\r\n        selected: false\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    icon: FaMapMarkedAlt,\r\n    name: 'Points of Interests',\r\n    subtypes: [\r\n      {\r\n        name: 'Sculptures',\r\n        placeTypeCodes: ['sculptures'],\r\n        display: true,\r\n        selected: false\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nconst TypeSelector = ({ ...rest }) => {\r\n  const { placeTypes } = useStateLink(PlaceState).get()\r\n\r\n  const toggleType = (type: Type) => {\r\n    const typeCodes = type.subtypes.map((subtype) => subtype.placeTypeCodes).flat()\r\n    if (type.subtypes.every((subtype) => subtype.selected)) {\r\n      type.subtypes.forEach((subtype) => (subtype.selected = false))\r\n      setPlaceTypes(placeTypes.filter((code) => typeCodes.indexOf(code) < 0))\r\n    } else {\r\n      type.subtypes.forEach((subtype) => (subtype.selected = true))\r\n      setPlaceTypes([...placeTypes, ...typeCodes.filter((code) => placeTypes.indexOf(code) < 0)])\r\n    }\r\n  }\r\n\r\n  const toggleSubtype = (subtype: Subtype) => {\r\n    subtype.selected = !subtype.selected\r\n    if (subtype.selected) {\r\n      setPlaceTypes([...placeTypes, ...subtype.placeTypeCodes])\r\n    } else {\r\n      setPlaceTypes(placeTypes.filter((code) => subtype.placeTypeCodes.indexOf(code) < 0))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='type-selector-component' {...rest}>\r\n      {types.map((type: Type) => {\r\n        const typeClasses = ['place-type']\r\n        const isAllSelected = type.subtypes.every((subtype) => subtype.selected)\r\n        if (isAllSelected) {\r\n          typeClasses.push('selected')\r\n        }\r\n        return (\r\n          <div\r\n            className={typeClasses.join(' ')}\r\n            key={type.name}\r\n            onClick={() => toggleType(type)}\r\n          >\r\n            <type.icon />\r\n            <div className='name'>\r\n              {type.name}\r\n            </div>\r\n            {!!type.subtypes.filter((t) => t.display).length && (\r\n              <div className='subtypes'>\r\n                {type.subtypes.map((subtype) => (\r\n                  <div\r\n                    key={subtype.name}\r\n                    className={`${subtype.selected ? 'selected' : ''}`}\r\n                    onClick={(event) => {\r\n                      event.stopPropagation()\r\n                      toggleSubtype(subtype)\r\n                    }}\r\n                  >\r\n                    {subtype.name}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TypeSelector\r\n","import React from 'react'\r\nimport { useStateLink } from '@hookstate/core'\r\n\r\nimport { Map, PlaceSidebar, PlaceModal, TypeSelector } from 'components'\r\nimport { PlaceState, setSelected } from 'states'\r\n\r\nimport './Home.scss'\r\n\r\nconst Home = () => {\r\n  const { selected } = useStateLink(PlaceState).get()\r\n\r\n  return (\r\n    <>\r\n      <PlaceSidebar />\r\n      <TypeSelector />\r\n      <Map />\r\n      <PlaceModal toggle={() => setSelected(null)} place={selected} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport { Header } from 'components'\r\n\r\nimport { Home } from 'pages'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './styles/index.scss'\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    toggleTheme()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const toggleTheme = () => {\r\n    const htmlTag = document.getElementsByTagName('html')[0]\r\n    const htmlClasses = htmlTag.className.split(' ')\r\n    let newClasses\r\n    if (htmlClasses.indexOf('dark') > -1) {\r\n      newClasses = [...htmlClasses.filter((c) => c !== 'dark'), 'light']\r\n    } else {\r\n      newClasses = [...htmlClasses.filter((c) => c !== 'light'), 'dark']\r\n    }\r\n    htmlTag.className = newClasses.join(' ')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header toggleTheme={toggleTheme} />\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          {/* <Route exact path={['/names/:isMale', '/names/:isMale/:code']} component={Names} /> */}\r\n          <Redirect to='/' />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}